# -*- coding: utf-8 -*-
"""ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17qITrvEvmp9684f7U5XP56qvxpjINgO7

# Import Modules
"""

import pandas as pd
import numpy as np
import math
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer

"""# Load Data"""

df = pd.read_csv("latestdata.csv",low_memory=False)
df=df[['age','country','date_onset_symptoms','date_admission_hospital','date_confirmation','symptoms','outcome','chronic_disease_binary']]

print(df.head(30))

"""# Mapping Data"""

mapOutcome = {
    "Alive": 0,
    "Critical condition": 1, 
    "Dead": 1,
    "Death": 1,
    "Deceased": 1,
    "Died": 1,
    "Discharged": 0,
    "Discharged from hospital": 0,
    "Hospitalised": 0,
    "Migrated": 0, 
    "Migrated_Other": 0,
    "Receiving Treatment": 0,
    "Recovered": 0,
    "Stable": 0,
    "Symptoms only improved with cough. Currently hospitalized for follow-up.": 0,
    "Under treatment": 0,
    "critical condition": 1,
    "critical condition, intubated as of 14.02.2020": 1,
    "dead": 1,
    "death": 1,
    "died": 1,
    "discharge": 0,
    "discharged": 0,
    "https://www.mspbs.gov.py/covid-19.php": 0,
    "not hospitalised": 0,
    "recovered": 0,
    "recovering at home 03.03.2020" : 0,
    "released from quarantine": 0,
    "severe": 1,
    "severe illness": 1,
    "stable": 0,
    "stable condition": 0,
    "treated in an intensive care unit (14.02.2020)": 0,
    "unstable": 0,
}

df['outcome']=df['outcome'].map(mapOutcome)
mapSymptom = {
    "fever" : [1],
    "Mild to moderate" : [3],
    "Mild:moderate" : [3],
    "cough, fever" : [1,2],
    "cough" : [2],
    "fever, myalgia" : [1],
    "pneumonia:acute respiratory failure:heart failure" : [4,5],
    "cardiogenic shock:acute coronary syndrome:heart failure:pneumonia" : [4,5,6]
}
df['symptoms']=df['symptoms'].map(mapSymptom)

mapCDB = {
    "TRUE":1,
    "FALSE":0
}
df['chronic_disease_binary']=df['chronic_disease_binary'].map(mapCDB)

"""Map age ranges to the median of those age ranges (taking the ceiling). Change ages in months to 1."""

mapAge = {
    "23-24":24,
    "27-29":28,
    "35-34":35,
    "40-49":45,
    "50-59":55,
    "60-69":65,
    "70-79":75,
    "80-89":85,
    0.25:0,
    "0-1":1,
    "18-50":34,
    "18-100":59,
    "18 - 100":59,
    "15-88":52,
    "90+":90,
    "60-":60,
    "4 months":1,
    "5 months":1,
    "5 month":1,
    "11 month":1,
    "6 months":1,
    "7 months":1,
    "9 month":1,
    "13 month":2,
    "18 months":1,
    "50-":50,
    "54.9":50,
    "48-49":49,
    29.6:30,
    "6 weeks":1,
    "74-76":75,
    
    "50-100":75,
    "29.6":30,
    "26-27":27,
    
    "0-60":30,
    54.9:55,
    "22-23":23,
    "50-99":75,
    "60-100":80,
    "35-54":45,
    "87-88":88,
    "55-74":65,
    "40-45":43,
    0.6:1,
    "0.6":1,
    "11-12":12,
    0.4:1,
    "65-99":82,
    "14-18":16,
    "70-100":85,
    "47-48":48,
    "30-35":33,
    "0-19":10,
    "70-70":70,
    "37-38":38,
    "0.4":1,
    "0.75":1,
}
df['age']=df['age'].replace(mapAge)
print(df['age'].value_counts())
print(df.head(60))